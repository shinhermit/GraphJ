//L'algorithme de Bellman basé sur la relaxation des arcs
//ne fonctionne pas lorsque le graphe contient des circuits.
//Or, dès qu'un graphe est relativement dense, il y a de fortes
//chances qu'il contienne des circuits. Nous retournons donc à
//la version original de l'algorithme, qui, à l'instar de celui de
//Dijkstra, ne fournit pas le bon résultat lorsqu'il y a des circuits absorbants.
//pour savoir si on a rencontré des circuits absorbants, nous
//utilisons le "drapeau" booléen #absorbant# (en pratique, champs de la classe)

FONCTION bellman( DON G(S,A) : Graphe; DON source : Sommet; minimisation : Booléen ) : Graphe
	VARIABLES
		distance_a_source : Map<Sommet, Entier>
		meilleur_prédécesseur : Map<Sommet, Sommet>
		i : Entier
		G'(S',A') : Graphe
	DÉBUT
		_initialiser(G, G', source, distance_a_source, minimisation)
		
		POUR i := 1 à taille(S) FAIRE
			_correction_des_tables(G, distance_a_source, meilleur_prédécesseur, minimisation)
		FINPOUR
		
		_construire_G'(G, G', distance_a_source, meilleur_prédécesseur)

		retourner G'
	FIN

PROCÉDURE _initialiser(DON G(S,A), DON-RES G'(S',A') : Graphe; DON source : Sommet; DON-RES distance_a_source : Map<Sommet, Entier>; minimisation : Booléen)
	VARIABLES
		i, infini : Entier
		s : Sommet
		Moins_infini := -30000
		Plus_infini := 30000

	DÉBUT
		infini := SI minimisation ALORS Plus_infini SINON Moins_infini
		
		distance_a_source[source] = 0
		ajouter_sommet(G', source)
		POUR i := 1 à taille(S) FAIRE
			s = ieme(S,i)
			SI
				s != source
			ALORS
				distance_a_source[s] = infini
			FINSI
		FINPOUR
	FIN

PROCÉDURE _correction_des_tables(DON G(S,A) : Graphe; DON-RES distance_a_source : Map<Sommet, Entier>; DON-RES meilleur_prédécesseur : Map<Sommet, Sommet>; minimisation : Booléen)
	VARIABLES
		a : Arc
		u,v : Sommet
		i, distance, nvlle_distance : Entier
		optimal : Booléen

	DÉBUT
		POUR i := 1 à taille(A) FAIRE
			a = ieme(A,i)
			u = source(a)
			v = target(a)
			distance = distance_a_source[v]
			nvlle_distance = distance_a_source(u) + coût(G, a)
			
			optimal := SI minimisation ALORS (nvlle_distance < distance) SINON (nvlle_distance > distance)
			SI
				optimal
			ALORS
				distance_a_source[v] = nvlle_distance
				meilleur_prédécesseur[v] = u
			FINSI
		FINPOUR
	FIN

PROCÉDURE _construire_G'(DON G(S,A) : Graphe; DON distance_a_source : Map<Sommet,Entier>; DON meilleur_prédécesseur : Map<Sommet, Sommet>) : Booléen
	VARIABLES
		absorbant : Booléen
		a : Arc
		pred, succ : Sommet
		i : Entier

	DÉBUT
		POUR i := 1 À taille(meilleur_prédécesseur) FAIRE
			pred = second( ieme(meilleur_prédécesseur, i) )
			succ = premier( ieme(meilleur_prédécesseur, i) )
			
			ajouter_arc(G', pred, succ, coût(G, pred, succ) )
		FINPOUR
	FIN

