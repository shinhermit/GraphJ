//L'algorithme ci-dessous permet d'obtenir
//le plus court chemin entre deux sommets d'un graphe
//en se basant sur un des algorithmes Dijkstra/Bellman.

/*
	L'idée de la procédure chemin_jusqua() est la suivante:
		*Le chemin jusqu'à s est:
			-le chemin jusqu'au prédécesseur p de s
			-prolongé de l'arc p->s

ATTENTION: on suppose que le graphe "chemins" passé à la fonction a une racine (source).
	On risque de boucler indéfiniment sinon (car aucun mécanisme de marquage mis en oeuvre)
	--> il faudrait la mettre privée
*/

FONCTION chemin_entre(G : Graphe; source, cible : Sommet; algo_dijkstra : Booléen) : Liste<Sommet>
	VARIABLES
		leChemin : Liste<Sommet>
		chemins : Graphe

	DÉBUT
		chemins = SI algo_dijkstra ALORS dijkstra(G, source) SINON bellman(G, source)
		leChemin = chemin_jusqua(G, chemins, cible)
		retourner leChemin
	FIN

FONCTION chemin_jusqua(G, chemins : Graphe; cible : Sommet) : Liste<Sommet>
	VARIABLES
		i : Entier
		prédécesseurs : Liste<Sommet>
		pred : Sommet
		leChemin : Liste<Sommet>

	DÉBUT
		prédécesseurs = prédécesseurs(G, cible)
		SI
			taille(prédécesseurs) > 0
		ALORS
			pred = ieme(prédécesseurs, 1)
			leChemin = chemin_jusqua(G, chemins, pred)
		FINSI
		insérer(leChemin, cible, taille(leChemin)+1)
		retourner leChemin
	FIN
