Problématique & hypothèses
*forme P2: "..."
*uniquement minimisation (pas de maximisation)
*pas de cycle absorbant (circuit dont le coût global est n&gatif) <= pas de coûts négatifs (on est sûr de na pas avoir de circuit absorbant)

principe:
*recherche du meilleur prédécesseur: celui qui permet d'arriver à un sommet avec le moindre coût.
	. utilise deux tables: table des meileurs prédécesseurs connus et tables des distances cumulées minimales au sommet origine
	. comporte une phase d'initialisation:
		. table des distances: distance à la source si adjacents, infinie sinon
		. table des meilleurs prédécesseurs connus: au départ, la source est le seul prédécesseur connu
		. le sommet source est ajouté au graphe des chemins (c'est point de départ)

	-chaque étape comporte deux parties:
		* le choix des sommets à ajouter: ici le plus proche du sommet source (distances cumulées [longueur du chemin])
		* correction des deux tables distances_minimales_cumulées/meilleur_prédécesseur:
			. Le sommet sélectionné est-il un meilleur prédécesseur (pour ses successeurs à lui) que le meilleur prédécesseur connu jusque là? ->On compare la longueur du prolongement des chemins jusqu'au successeur courant.


//les algorithmes ci-dessous donnent des arbres (couvrants pour un graphe connexe),
//ils ne fournissent donc pas les chemins équivalents (chemins optimaux de coûts égaux)
//nous implémenterons une deuxième version qui fournira les chemins équivalents (donc pas
// forcément des arbres)

FONCTION dijkstra(G : Graphe; source : Sommet) : Graphe
	VARIABLES
		distance_a_source : Map<Sommet, Entier>
		meilleur_predecesseur : Map<Sommet, Sommet>
		candidats : Liste<Sommet>
		chemins : Graphe
		plusProche, meilPred : Sommet
		toutInfini : Booléen
		INFINI := 20000

	DÉBUT
		_initialiser(G, chemins, source, candidats, distance_a_source, meilleur_predecesseur)
		toutInfini := FAUX
		TANTQUE taille(chemins) < taille(G) ET NON toutInfini FAIRE
			plusProche := _plusProche(candidats, distance_a_source)
			SI
				distance_a_source[plusProche] = INFINI
			ALORS
				toutInfini := VRAI
			SINON
				_correction_des_tables(G, chemins, plusProche, distance_a_source, meilleur_predecesseur)
				meilPred := meilleur_predecesseur[plusProche]
				ajouter_arc( chemins, meilPred, plusProche, coût(G, meilPred, plusProche) )
				retirer(candidats, plusProche)
			FINSI
		FINTANTQUE
		retourner chemins
	FIN

PROCÉDURE _initialiser(DON G(S,A), DON-RES chemin(S', A') : Graphe; DON source : Sommet; DON-RES candidats : Liste<Sommet>; DON-RES distance_a_source : Map<Sommet, Entier>; DON-RES meilleur_predecesseur : Map<Sommet, Sommet>)
	VARIABLES
		s : Sommet
		i, distance : Entier

	DÉBUT
		distance_a_source[source] := 0
		ajouter_sommet(chemins, source)
		POUR i:=1 à taille(S) FAIRE
			s := ième(S)
			meilleur_predécesseur[s] := source
			
			SI
				s != source
			ALORS
				ajouter(candidats, s, taille(candidats)+1)
				SI
					est_arc_de(G, source, s)
				ALORS
					distance := coût(G, source, s)
				SINON
					distance := INFINI
				FINSI
				distance_a_source[s] := distance
			FINSI			
		FINPOUR
	FIN

FONCTION _plusProche(DON candidats : Liste<Sommet>; DON distance_a_source : Map<Sommet, Entier>) : Sommet
	VARIABLES
		s, plusProche : Sommet
		i, nvlle_distance, d_plusProche : Entier

	DÉBUT
		plusProche := ieme(candidats, 1)
		d_plusProche := distance_a_source[plusProche]
		
		POUR i := 2 à taille(candidats) FAIRE
			s := ieme(candidats, i)
			nvlle_distance := distance_a_source[s]
			SI
				nvlle_distance < d_plusProche
			ALORS
				d_plusProche := nvlle_distance
				plusProche := s
			FINSI
		FINPOUR

		retourner plusProche
	FIN

PROCÉDURE _correction_des_tables(DON G, DON chemins : Graphe; DON plusProche : Sommet; DON-RES distance_a_source : Map<Sommet, Entier>; DON-RES meilleur_predecesseur : Map<Sommet, Sommet>)
	VARIABLES
		successeurs : Set<Sommet>
		succ : Sommet
		i, distance, nvlle_distance : Entier
	DÉBUT
		successeurs := successeurs(G, plusProche)
		POUR i := 1 à taille(successeurs) FAIRE
			succ := ieme(successeurs, i)
			SI
				NON est_sommet_de(chemins, succ)
			ALORS
				distance := distance_a_source[succ]
				nvlle_distance := distance_a_source[plusProche] + coût(G, plusProche, succ)
				SI
					nvlle_distance < distance
				ALORS
					distance_a_source[succ] := nvlle_distance
					meilleur_predecesseur[succ] := plusProche
				FINSI
			FINSI
		FINPOUR
	FIN

