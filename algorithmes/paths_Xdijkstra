//Xdijkstra : eXtended_dijkstra
//les algorithmes ci-dessous donnent tous les chemins solutions:
//ils fournissent les chemins équivalents (chemins optimaux de coûts égaux),
//contrairement à la première version

FONCTION dijkstra(DON G(S,A) : Graphe; DON source : Sommet) : Graphe
	VARIABLES
		distance_a_source : Map<Sommet, Entier>
		meilleurs_predecesseurs : Map<Sommet, Liste<Sommet> >
		candidats, tousLesPlusProches : Liste<Sommet>
		chemins(S', A') : Graphe
		unPlusProche: Sommet
		toutInfini : Booléen
		INFINI := 20000

	DÉBUT
		_initialiser(G, chemins, source, candidats, distance_a_source, meilleurs_predecesseurs)
		toutInfini := FAUX
		TANTQUE taille(S') < taille(S) ET NON toutInfini FAIRE
			tousLesPlusProches := _plusProches(candidats, distance_a_source)
			unPlusProche := ième(tousLesPlusProches, 1)
			SI
				distance_a_source[unPlusProche] = INFINI
			ALORS
				toutInfini := VRAI
			SINON
				_correction_des_tables(G, chemins, tousLesPlusProches, distance_a_source, meilleurs_predecesseurs)
				_ajouter_arcs(G, chemins, meilleurs_prédécesseurs, tousLesPlusProches)
				_retirer_sommets(candidats, tousLesPlusProches)
			FINSI
		FINTANTQUE
		retourner chemins
	FIN

PROCÉDURE _initialiser(DON G(S,A), DON-RES chemin(S', A') : Graphe; DON source : Sommet; DON-RES candidats : Liste<Sommet>; DON-RES distance_a_source : Map<Sommet, Entier>; DON-RES meilleurs_predecesseurs : Map<Sommet, Liste<Sommet> >)
	VARIABLES
		s : Sommet
		i, distance : Entier

	DÉBUT
		distance_a_source[source] := 0
		ajouter_sommet(chemins, source)
		POUR i:=1 à taille(S) FAIRE
			s := ième(S)
			insérer(meilleur_predécesseur[s], source, 0)
			
			SI
				s != source
			ALORS
				ajouter(candidats, s, taille(candidats)+1)
				SI
					est_arc_de(G, source, s)
				ALORS
					distance := coût(G, source, s)
				SINON
					distance := INFINI
				FINSI
				distance_a_source[s] := distance
			FINSI			
		FINPOUR
	FIN

FONCTION _plusProches(DON candidats : Liste<Sommet>; DON distance_a_source : Map<Sommet, Entier>) : Liste<Sommet>
	VARIABLES
		s, plusProche : Sommet
		i, nvlle_distance, d_plusProche : Entier
		tousLesPlusProches : Liste<Sommet>

	DÉBUT
		plusProche := ieme(candidats, 1)
		d_plusProche := distance_a_source[plusProche]
		insérer(tousLesPlusProches, plusProche, 1)
		
		POUR i := 2 à taille(candidats) FAIRE
			s := ieme(candidats, i)
			nvlle_distance := distance_a_source[s]
			SI
				nvlle_distance < d_plusProche
			ALORS
				d_plusProche := nvlle_distance
				plusProche := s
				vider(tousLesPlusProches)
				insérer(tousLesPlusProches, plusProche, 1)
			SINON
				SI
					nvlle_distance = d_plusProche
				ALORS
					insérer(tousLesPlusProches, plusProche, taille(tousLesPlusProches)+1)
				FINSI
			FINSI
		FINPOUR

		retourner plusProche
	FIN

PROCÉDURE _ajouter_arcs(DON G, DON-RES chemins : Graphe; DON meileurs_prédécesseurs : Map<Sommet, Liste<Sommet> >; DON tousLesPlusProches : Liste<Sommet>)
	VARIABLES
		meilPreds : Liste<Sommet>
		plusProche, pred : Sommet
		i, j : Entier

	DÉBUT
		POUR i:=1 à taille(tousLesPlusProches) FAIRE
			plusProche := ième(tousLesPlusProches, i)
			meilPreds := meilleurs_prédécesseurs[plusProche];

			POUR j:=1 à taille(meilPreds) FAIRE
				pred := ième(meilPreds, j)
				ajouter_arc(chemins, pred, plusProche, coût(G, pred, plusProche) )
			FINPOUR
		FINPOUR
	FIN

PROCÉDURE _retirer_sommets(DON-RES candidats, DON tousLesPlusProches : Liste<Sommet>)
	VARIABLES
		plusProche : Sommet
		i : Entier

	DÉBUT
		POUR i:=1 à taille(tousLesPlusProches) FAIRE
			plusProche := ième(tousLesPlusProches)
			retirer(candidats, plusProche)
		FINPOUR
	FIN

PROCÉDURE _correction_des_tables(DON G, DON chemins : Graphe; DON tousLesplusProches : Liste<Sommet>; DON-RES distance_a_source : Map<Sommet, Entier>; DON-RES meilleurs_predecesseurs : Map<Sommet, Liste<Sommet> >)
	VARIABLES
		successeurs : Set<Sommet>
		succ, plusProche : Sommet
		i, j, distance, nvlle_distance : Entier
	DÉBUT
		POUR i:=1 à taille(tousLesPlusProches) FAIRE
			plusProche = ième(tousLesPlusProches, i)
			successeurs := successeurs(G, plusProche)
			POUR j := 1 à taille(successeurs) FAIRE
				succ := ieme(successeurs, j)
				SI
					NON est_sommet_de(chemins, succ)
				ALORS
					distance := distance_a_source[succ]
					nvlle_distance := distance_a_source[plusProche] + coût(G, plusProche, succ)
					SI
						nvlle_distance < distance
					ALORS
						distance_a_source[succ] := nvlle_distance
						vider(meilleur_predecesseur[succ])
						insérer(meilleur_predecesseur[succ], plusProche, 1)
					SINON
						SI
							nvlle_distance = distance
						ALORS
							insérer(meilleur_predecesseur[succ], plusProche, taille(meilleur_predecesseur[succ])+1)
						FINSI
					FINSI
				FINSI
			FINPOUR
		FINPOUR
	FIN

