//Cette variante simplifie la fusion (réduite à une union),
//car on est sûr que le sommet ajouté à l'acm
//ne peut pas être à nouveau candidat à l'ajout.
//Il nécessite cependant une recopie du graphe, en O(n+m),
//et d'être prudent pour savoir quand il faut employer G ou plutôt la copie

//pour le tri, en pratique, on ne retrie pas les voisins à chaque passage
//on insert directement chaque nouvel élément à la bonne place

procedure acm_prim(G, acm: Graphe)
	variables
		G_copie : Graphe
		voisins, nouveaux_voisins : Ensemble<Arête>
		s1, v_min : Sommet
		a_min : Arête

	début
		. mettre G_copy = G
		. considérer le premier sommet s1 de G
		. mettre dans voisins toutes les arêtes de G impliquant s1
		. trier voisins par ordre croissants de coûts
		. ajouter s1 à acm
		. retirer s1 de G_copie
		. TANT QUE voisins est non vide ET nb_sommets(acm) < nb_sommets(G) FAIRE
			. considérer l'arête a_min du voisin le plus proche, a_min = premier(voisins)
			. récupérer le plus proche voisin, v_min = target(a_min)
			. ajouter v_min à acm
			. retirer a_min de voisins
			. mettre nouveaux_voisins = adjacents(G_copie, v_min)
			. retirer v_min de G_copie
			. mettre voisins = union(voisins, nouveaux_voisins)
			. trier voisins par ordre croissant de coûts
	fin

